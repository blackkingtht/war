using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Experimental.UIElements;


namespace Assets.Scripts.Soldier
{
    public class PlayerCtrl : MonoBehaviour
    {

        public int PlayerID { get; private set; }       //玩家ID
        public Camp Camp { get; private set; }          //阵营
        private bool SelectBuild;                       //是否选定需要建造的建筑物
        private Vector3 BuildPos;                       //建造建筑的位置
        private Quaternion StartRotate;                 //旋转预制体使其朝向正确的方向
        private Vector3 CorrectMove;                    //修正在选定砖上的距离
        private String BuildArea;                       //可以建造建筑的区域
        private Animator ani;
        GameObject newBuild;                            //当前创建的建筑


        public void Init(int playerId, Camp camp)
        {
            PlayerID = playerId;
            Camp = camp;
            Correct();
        }
        // Use this for initialization
        void Start()
        {
            NetDispacher.Instance.AddEventListener("sendBuildPosition_bcst", OnSendBuildPosition_bcst);
            NetDispacher.Instance.AddEventListener("sendStartSoldier_bcst", OnsendStartSoldier_bcst);
            NetDispacher.Instance.AddEventListener("sendSoldierPos_bcst", OnsendSoldierPos_bcst);
            ani = GetComponent<Animator>();
            InvokeRepeating("SendSoldierPosition", 0, 1f / 45f);
        }

        private void OnDestroy()
        {
            NetDispacher.Instance.RemoveEventListener("sendBuildPosition_bcst", OnSendBuildPosition_bcst);
            NetDispacher.Instance.RemoveEventListener("sendStartSoldier_bcst", OnsendStartSoldier_bcst);
            NetDispacher.Instance.RemoveEventListener("sendSoldierPos_bcst", OnsendSoldierPos_bcst);
        }

        /// <summary>
        /// 接收服务器同步其他玩家小兵位置的消息
        /// </summary>
        /// <param name="param"></param>
        private void OnsendSoldierPos_bcst(object msg)
        {
            var handle = msg as mmopb.sendSoldierPos_bcst;
            if (handle.roleId == LocalUser.Instance.PlayerId)
                return;
            var dic=handle.soldierPosInfoList;
            foreach (var pair in dic)
            {
                if (DataMgr.Instance.SoldierDic.ContainsKey(pair.Key))
                {
                    DataMgr.Instance.SoldierDic[pair.Key].UpdatePos(pair.Value);
                }
            }
        }

        /// <summary>
        /// 每1/24秒向服务器发送己方小兵位置
        /// </summary>
        private void SendSoldierPosition()
        {
            var handle = new mmopb.sendSoldierPos_req();
            var dic = new Dictionary<int, mmopb.p_SoldierPosInfo>();
            foreach (var pair in DataMgr.Instance.SoldierDic)
            {
                if (pair.Value.playerId == LocalUser.Instance.PlayerId)
                {
                    SoldierCtrl soldier = pair.Value;
                    var info=new mmopb.p_SoldierPosInfo();
                    info.x = soldier.transform.position.x;
                    info.y = soldier.transform.position.y;
                    info.z = soldier.transform.position.z;
                    info.xQuternion = soldier.transform.rotation.x;
                    info.yQuternion = soldier.transform.rotation.y;
                    info.zQuternion = soldier.transform.rotation.z;
                    info.wQuternion = soldier.transform.rotation.w;
                    dic.Add(soldier.id, info);
                }
            }
            handle.soldierPosInfoList = dic;
            ClientNet.Instance.Send(ProtoBuf.ProtoHelper.EncodeWithName(handle));
        }

        /// <summary>
        /// 收到服务器消息，同步其他玩家建筑位置
        /// </summary>
        /// <param name="param"></param>
        private void OnSendBuildPosition_bcst(object param)
        {
            var handle = param as mmopb.sendBuildPosition_bcst;
            if (handle.roleId == PlayerID) return;
            //目前暂时是骑兵
            newBuild = (GameObject)Resources.Load("Prefabs/cavalry_Build");
            Quaternion quaternion = new Quaternion(handle.xQuternion, handle.yQuternion, handle.zQuternion,handle.wQuternion);    
            BuildCtrl newBuildCtrl = Instantiate(newBuild, new Vector3(handle.x,handle.y,handle.z), quaternion).AddComponent<BuildCtrl>();
            DataMgr.Instance.BuildDic.Add(DataMgr.SoldierBuildId, newBuildCtrl);
            newBuildCtrl.Init(DataMgr.SoldierBuildId++, handle.roleId,Camp == Camp.Dark ? Camp.Bright : Camp.Dark, quaternion);
        }
        //private void Awake()
        //{
        //    SelectBuild = false;
        //    ///测试，应放在Init函数内
        //    PlayerID = 1;
        //    Camp = Camp.Bright;
        //    ///

        //    Correct();
        //}

        // Update is called once per frame
        void Update()
        {
            ////点击左键，如果没有选中要建造的建筑物，则判断是否选中要造的建筑物
            //if (Input.GetMouseButtonDown(0) && !SelectBuild)
            //{
            //    Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
            //    RaycastHit[] array = Physics.RaycastAll(ray, Mathf.Infinity, 1 << (LayerMask.NameToLayer("card")));

            //    if (array.Length > 0 && GetComponent<Collider>() == array[0].collider)
            //    {
            //        SelectBuild = true;
            //    }
            //}
            ////点击左键同时选中了建筑，建造
            //if (SelectBuild && Input.GetMouseButtonDown(0))
            //{
            //    Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
            //    RaycastHit[] array = Physics.RaycastAll(ray, Mathf.Infinity, 1 << (LayerMask.NameToLayer(BuildArea)));
            //    if (array.Length > 0)
            //    {
            //        BuildPos = array[0].transform.position;
            //        BuildPos += CorrectMove;
            //        BuildPos.y = (float)0.4;

            //        InitBuild();
            //        //BuildPos.z += (float)2.54;
            //    }
            //    //BuildPos = Input.mousePosition;
            //    SelectBuild = false;
            //}
            //点击左键同时选中了建筑，建造
            if (LocalUser.Instance.CardStatus!=SoldierEnum.None && Input.GetMouseButtonDown(0))
            {
                Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
                RaycastHit[] array = Physics.RaycastAll(ray, Mathf.Infinity, 1 << (LayerMask.NameToLayer(BuildArea)));
                if (array.Length > 0)
                {
                    BuildPos = array[0].transform.position;
                    BuildPos += CorrectMove;
                    BuildPos.y = (float)0.4;
                    InitBuild();
                    //创建建筑，发送消息给服务器。(可以写成一个方法)
                    var handle = new mmopb.sendBuildPosition_req();
                    //将枚举类型强转为int型
                    handle.buildType = Convert.ToInt32(LocalUser.Instance.CardStatus);
                    handle.x = BuildPos.x;
                    handle.y = BuildPos.y;
                    handle.z = BuildPos.z;
                    handle.xQuternion = StartRotate.x;
                    handle.yQuternion = StartRotate.y;
                    handle.zQuternion = StartRotate.z;
                    handle.wQuternion = StartRotate.w;
                    //将消息发送给服务器。
                    ClientNet.Instance.Send(ProtoBuf.ProtoHelper.EncodeWithName(handle));
                    LocalUser.Instance.CardStatus = SoldierEnum.None;
                    CardCtrl.instance.ResetCardColor();
                }               
            }
        
        }
        //建建筑
        void InitBuild()
        {
            newBuild = (GameObject)Resources.Load("Prefabs/cavalry_Build");
            BuildCtrl newBuildCtrl = Instantiate(newBuild, BuildPos, StartRotate).AddComponent<BuildCtrl>();
            DataMgr.Instance.BuildDic.Add(DataMgr.SoldierBuildId, newBuildCtrl);
            newBuildCtrl.Init(DataMgr.SoldierBuildId++, PlayerID, Camp, StartRotate);
        }

        //矫正兵的朝向及位置
        void Correct()
        {
            if (Camp == Camp.Bright)
            {
                StartRotate = Quaternion.Inverse(new Quaternion(0, (float)0.7, 0, (float)0.7));
                CorrectMove.x = (float)1;
                CorrectMove.z = (float)-0.5;
                BuildArea = "BrightBrick";
            }
            else
            {
                StartRotate = new Quaternion(0, (float)0.7, 0, (float)0.7);
                CorrectMove.x = (float)-1;
                CorrectMove.z = (float)1.5;
                BuildArea = "DarkBrick";
            }
        }
        /// <summary>
        ///接收服务器发兵消息
        /// </summary>
        /// <param name="param"></param>
        private void OnsendStartSoldier_bcst(object param)
        {
            foreach (var pair in DataMgr.Instance.BuildDic)
            {
                pair.Value.StartSoldierEvery30S();
            }
        }
    }
}
